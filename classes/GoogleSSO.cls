// TODO:This autogenerated class includes the basics for a Registration
// Handler class. You will need to customize it to ensure it meets your needs
// and the data provided by the third party.

global class GoogleSSO implements Auth.RegistrationHandler {
  global User createUser(Id portalId, Auth.UserData data) {
    if (data.attributeMap.containsKey('sfdc_networkid')) {
      // We have a community id, so create a user with community access
      // TODO: Get an actual account
      Account accountRec = [SELECT Id FROM account WHERE name = 'Salesforce'];
      Contact contactRec = new Contact();
      contactRec.accountId = accountRec.Id;
      contactRec.email = data.email;
      contactRec.firstName = data.firstName;
      contactRec.lastName = data.lastName;
      insert(contactRec);

      // TODO: Customize the username and profile. Also check that the username
      // doesn't already exist and possibly ensure there are enough org licenses
      // to create a user. Must be 80 characters or less.
      User userRec = new User();
      Profile profileRec =
          [SELECT Id FROM profile WHERE name = 'Customer Community Login User'];
      userRec.username = data.email.subStringBefore('@') + '@abcbank.com';
      userRec.email = data.email;
      userRec.lastName = data.lastName;
      userRec.firstName = data.firstName;
      String alias = userRec.username.subString(0, 3);
      // Alias must be 8 characters or less
      if (alias.length() > 8) {
        alias = alias.substring(0, 8);
      }
      userRec.alias = alias;
      userRec.languagelocalekey = UserInfo.getLocale();
      userRec.localesidkey = UserInfo.getLocale();
      userRec.emailEncodingKey = 'UTF-8';
      userRec.timeZoneSidKey = 'America/Los_Angeles';
      userRec.profileId = profileRec.Id;
      userRec.contactId = contactRec.Id;
      return userRec;
    } else {
      // This is not a community, so create a regular standard user
      User userRec = new User();
      Profile profileRec = [SELECT Id FROM profile WHERE name = 'Identity User'];
      // TODO: Customize the username. Also check that the username doesn't
      // already exist and possibly ensure there are enough org licenses to
      // create a user. Must be 80 characters or less.
      userRec.username = data.firstName + '_' + data.lastname + '@myorg.com';
      userRec.email = data.email;
      userRec.lastName = data.lastName;
      userRec.firstName = data.firstName;
      String alias = data.firstname + data.lastname;
      // Alias must be 8 characters or less
      if (alias.length() > 8) {
        alias = alias.substring(0, 8);
      }
      userRec.alias = alias;
      userRec.languagelocalekey = UserInfo.getLocale();
      userRec.localesidkey = UserInfo.getLocale();
      userRec.emailEncodingKey = 'UTF-8';
      userRec.timeZoneSidKey = 'America/Los_Angeles';
      userRec.profileId = profileRec.Id;
      System.debug('# Debug ' + userRec);
      return userRec;
    }
  }

  global void updateUser(Id userId, Id portalId, Auth.UserData data) {
    System.debug(' # Portal Id ' + portalId + ' # Data' + data + ' # userId ' +
                 userId);
    User userRec = new User(id = userId);
    // TODO: Customize the username. Must be 80 characters or less.
    // userRec.username = data.username + '@myorg.com';
    userRec.email = data.email;
    userRec.lastName = data.lastName;
    userRec.firstName = data.firstName;
    // String alias = data.username;
    // Alias must be 8 characters or less
    userRec.alias = data.firstName.substring(0, 5);
    update(userRec);
  }
}